name: Deploy Backend to EC2

on:
  push:
    branches: [ main ]
    paths: [ 'server/**' ]
  workflow_dispatch:

concurrency:
  group: deploy-backend
  cancel-in-progress: true

permissions:
  contents: read

env:
  REPO_DIR: /home/ec2-user/DARAPO
  SERVICE_DIR: /home/ec2-user/DARAPO/server

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # server 폴더만 동기화
      - name: Sync server files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "server/"
          target: "${{ env.REPO_DIR }}/"
          overwrite: true
          rm: true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: SERVICE_DIR
          script: |
            set -e
            
            echo "📂 서버 디렉터리로 이동..."
            cd "$SERVICE_DIR"
            
            echo "📂 현재 디렉터리 확인: $(pwd)"
            echo "📁 파일 목록:"
            ls -la
            
            echo "📦 의존성 설치..."
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
            
            echo "⚒️ 프로젝트 빌드..."
            npm run build
            
            echo "🚀 PM2로 서버 재시작..."
            if pm2 describe darapo-server > /dev/null 2>&1; then
              pm2 reload ecosystem.config.js
            else
              pm2 start ecosystem.config.js
            fi
            
            echo "⏳ 서비스 안정화 대기..."
            sleep 20
            
            echo "🔍 로컬 헬스체크..."
            for i in {1..8}; do
              if curl -f http://localhost:3000/api > /dev/null 2>&1; then
                echo "✅ 헬스체크 성공! ($i/8) - /api"
                break
              elif curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                echo "✅ 헬스체크 성공! ($i/8) - /api/health"
                break
              elif curl -f http://localhost:3000/ > /dev/null 2>&1; then
                echo "✅ 서버 응답 확인! ($i/8) - /"
                break
              else
                echo "⚠️ 헬스체크 실패, 재시도... ($i/8)"
                sleep 5
              fi
            done
            
            echo "📊 PM2 상태 확인:"
            pm2 status
            echo "✅ 서버 배포 완료!"

      - name: External Health Check
        run: |
          echo "🌐 외부 헬스체크..."
          for i in {1..12}; do
            if curl -f https://api.darapo.site/api > /dev/null 2>&1; then
              echo "✅ 외부 헬스체크 성공! ($i/12) - /api"
              exit 0
            elif curl -f https://api.darapo.site/api/health > /dev/null 2>&1; then
              echo "✅ 외부 헬스체크 성공! ($i/12) - /api/health"
              exit 0
            elif curl -f https://api.darapo.site/ > /dev/null 2>&1; then
              echo "✅ 외부 서버 응답 확인! ($i/12) - /"
              exit 0
            else
              echo "⚠️ 외부 헬스체크 실패, 재시도... ($i/12)"
              sleep 8
            fi
          done
          echo "❌ 외부 헬스체크 최종 실패"
          exit 1