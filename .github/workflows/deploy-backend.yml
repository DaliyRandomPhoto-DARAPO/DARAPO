name: Deploy Server (EC2)

on:
  push:
    branches: [ main ]
    paths: [ 'server/**' ]
  workflow_dispatch:

concurrency:
  group: deploy-server
  cancel-in-progress: true

permissions:
  contents: read

env:
  REPO_DIR: /home/ec2-user/DARAPO
  SERVICE_DIR: /home/ec2-user/DARAPO/server
  HEALTH_LOCAL: http://localhost:3000/api/health/liveness
  HEALTH_EXTERNAL: https://api.darapo.site/api/health/liveness
  PM2_APP_NAME: server
  NODE_VERSION: 22 

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - name: Ensure target dirs on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            mkdir -p "${{ env.REPO_DIR }}" "${{ env.SERVICE_DIR }}"

      # server 내용만 덮기. 상위 폴더 안 지움.
      - name: Sync server/ to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "server/*"
          target: ${{ env.SERVICE_DIR }}
          overwrite: true

      - name: SSH Build & Reload (no heredoc)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          envs: SERVICE_DIR,PM2_APP_NAME,NODE_VERSION,HEALTH_LOCAL
          script: |
            set -Eeuo pipefail
            dump_logs() { echo "💥 실패! PM2 최근 로그👇"; pm2 logs "$PM2_APP_NAME" --lines 120 || true; }
            trap dump_logs ERR

            cd "$SERVICE_DIR" || { echo "❌ $SERVICE_DIR 없음"; exit 1; }

            echo "🔧 toolchain"
            if command -v yum >/dev/null 2>&1; then
              sudo yum -y install gcc-c++ make python3 || true
            elif command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update -y || true
              sudo apt-get install -y build-essential python3 || true
            fi

            echo "🔁 Node $NODE_VERSION (nvm)"
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] || (curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.9/install.sh | bash)
            . "$NVM_DIR/nvm.sh"
            nvm install "$NODE_VERSION"
            nvm use "$NODE_VERSION"
            node -v
            npm -v

            echo "📦 deps"
            if [ -f package-lock.json ]; then
              npm ci || npm i
            else
              npm i
            fi

            echo "⚒️ build"
            npm run build

            echo "🚀 pm2 start/reload (ecosystem 파일없이)"
            command -v pm2 >/dev/null || npm i -g pm2

            if pm2 describe "$PM2_APP_NAME" >/dev/null 2>&1; then
              # 이미 돌고 있으면 환경만 갱신하며 reload
              PORT=3000 NODE_ENV=production pm2 reload "$PM2_APP_NAME" --update-env --time
            else
              # 최초 기동
              PORT=3000 NODE_ENV=production pm2 start dist/main.js --name "$PM2_APP_NAME" --time
            fi

            pm2 save
            pm2 list

            echo "⏳ 안정화 대기..."
            sleep 8

            echo "🔍 로컬 헬스체크"
            for i in $(seq 1 8); do
              if curl -fsS --max-time 2 "$HEALTH_LOCAL" >/dev/null; then
                echo "✅ 로컬 OK ($i/8)"; exit 0
              else
                echo "⚠️ 실패, 재시도 ($i/8)"; sleep 3
              fi
            done
            echo "❌ 로컬 헬스체크 실패"; exit 1

      - name: External Health Check
        shell: bash
        env:
          HEALTH_EXTERNAL: ${{ env.HEALTH_EXTERNAL }}
        run: |
          echo "🔍 외부 헬스체크 시작..."
          for i in $(seq 1 12); do
            if curl -fsS --max-time 3 "$HEALTH_EXTERNAL" >/dev/null; then
              echo "✅ 외부 OK ($i/12)"; exit 0
            else
              echo "⚠️ 실패, 재시도 ($i/12)"; sleep 5
            fi
          done
          echo "❌ 외부 헬스체크 최종 실패"; exit 1
