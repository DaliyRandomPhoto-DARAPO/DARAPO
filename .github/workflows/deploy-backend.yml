name: Deploy Backend to EC2

on:
  push:
    branches: [ main ]
    paths: [ 'server/**' ]
  workflow_dispatch:

concurrency:
  group: deploy-backend
  cancel-in-progress: true

permissions:
  contents: read

env:
  SERVICE_DIR: /home/ec2-user/DARAPO/server

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # .env 파일 백업
      - name: Backup .env file
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            if [ -f /home/ec2-user/DARAPO/server/.env ]; then
              cp /home/ec2-user/DARAPO/server/.env /tmp/.env.backup
              echo "✅ .env 백업 완료"
            fi

      # server 폴더만 동기화
      - name: Sync server files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "server/"
          target: "/home/ec2-user/DARAPO/"
          overwrite: true

      # 빌드 및 재시작
      - name: Build and restart
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            
            cd /home/ec2-user/DARAPO/server
            
            # nvm 초기화 (nvm 사용 시)
            if [ -f ~/.nvm/nvm.sh ]; then
              source ~/.nvm/nvm.sh
              nvm use default || nvm use node
            fi
            
            # .env 파일 복원
            if [ -f /tmp/.env.backup ]; then
              cp /tmp/.env.backup .env
              rm /tmp/.env.backup
              echo "✅ .env 복원 완료"
            fi
            
            # 의존성 설치 (실패 시 중단)
            echo "📦 Installing dependencies..."
            npm ci || { echo "❌ npm ci failed"; exit 1; }
            
            # 빌드 (npm ci 성공 후)
            echo "🔨 Building application..."
            npm run build || { echo "❌ Build failed"; exit 1; }
            
            # PM2 재시작 (경로 보장)
            echo "🔄 Reloading PM2..."
            npx pm2 reload ecosystem.config.js || pm2 reload ecosystem.config.js || { echo "❌ PM2 reload failed"; exit 1; }
            
            # 헬스체크
            echo "🔍 Health check..."
            sleep 10
            if curl -f http://localhost:3000/api > /dev/null 2>&1; then
              echo "✅ 배포 성공!"
            else
              echo "⚠️ 헬스체크 실패"
              npx pm2 logs --lines 10 || pm2 logs --lines 10
              exit 1
            fi