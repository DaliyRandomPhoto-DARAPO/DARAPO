name: Deploy Server (EC2)

on:
  push:
    branches: [ main ]
    paths: [ 'server/**' ]
  workflow_dispatch:

concurrency:
  group: deploy-server
  cancel-in-progress: true

permissions:
  contents: read

env:
  REPO_DIR: /home/ec2-user/DARAPO
  SERVICE_DIR: /home/ec2-user/DARAPO/server
  HEALTH_LOCAL: http://localhost:3000/api/health/liveness
  HEALTH_EXTERNAL: https://api.darapo.site/api/health/liveness
  PM2_APP_NAME: server

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - name: Ensure base dir on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            mkdir -p "${{ env.REPO_DIR }}"

      - name: Sync server folder (no nesting)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "server"
          target: ${{ env.REPO_DIR }}
          overwrite: true

      # 혹시 이전에 생긴 server/server 중첩 있으면 즉시 정리
      - name: Flatten accidental nesting
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: SERVICE_DIR
          script: |
            set -Eeuo pipefail
            if [ -d "$SERVICE_DIR/server" ]; then
              echo "⚠️ nested server/server 발견 → 정리"
              shopt -s dotglob
              mv "$SERVICE_DIR/server/"* "$SERVICE_DIR/" || true
              rmdir "$SERVICE_DIR/server" || true
            fi
            echo "📂 내용 확인"; ls -la "$SERVICE_DIR"

      # 서버에 node/npm/pm2는 이미 깔려있다는 전제
      - name: Build & PM2 reload (preinstalled node/pm2)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          envs: SERVICE_DIR,PM2_APP_NAME,HEALTH_LOCAL
          script: |
            set -Eeuo pipefail
            trap 'echo "💥 실패! PM2 최근 로그👇"; pm2 logs "$PM2_APP_NAME" --lines 120 || true' ERR

            cd "$SERVICE_DIR"

            echo "📦 deps"
            if [ -f package-lock.json ]; then
              npm ci || npm i
            else
              npm i

            fi

            echo "⚒️ build"
            npm run build

            echo "🚀 pm2 start/reload"
            command -v pm2 >/dev/null 2>&1 || { echo "❌ pm2 없음"; exit 1; }
            if pm2 describe "$PM2_APP_NAME" >/dev/null 2>&1; then
              PORT=3000 NODE_ENV=production pm2 reload "$PM2_APP_NAME" --update-env --time
            else
              PORT=3000 NODE_ENV=production pm2 start dist/main.js --name "$PM2_APP_NAME" --time
            fi
            pm2 save
            pm2 list

            echo "🔍 로컬 헬스체크"
            curl -fsS --max-time 3 "$HEALTH_LOCAL" >/dev/null

      - name: External Health Check
        shell: bash
        env:
          HEALTH_EXTERNAL: ${{ env.HEALTH_EXTERNAL }}
        run: |
          echo "🔍 외부 헬스체크"
          curl -fsS --max-time 5 "$HEALTH_EXTERNAL" >/dev/null